#!/usr/bin/env python3
"""
Test script to demonstrate corpus search functionality with Vietnamese historical document.
"""

import asyncio
import sys
from pathlib import Path

# Add the project root to Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from app.services.qdrant_service import qdrant_service
from app.services.ai_service import initialize_qdrant_integration


async def test_corpus_search():
    """Test various search queries on the Vietnamese history corpus."""

    print("üîç VIETNAM HISTORY CORPUS SEARCH TEST")
    print("=" * 50)

    # Initialize the AI-Qdrant integration
    print("üîó Initializing AI-Qdrant integration...")
    initialize_qdrant_integration()

    collection_name = "vietnam_history"

    # Check if collection exists
    exists = await qdrant_service.collection_exists(collection_name)
    if not exists:
        print(f"‚ùå Collection '{collection_name}' does not exist!")
        print(
            "Please run process_corpus.py first to create and populate the collection."
        )
        return False

    # Get collection statistics
    print("üìä Collection Statistics:")
    stats = await qdrant_service.get_corpus_statistics(collection_name)
    if "error" in stats:
        print(f"Error: {stats['error']}")
        return False

    print(f"Total vectors: {stats['total_vectors']}")
    print(f"Total chunks: {stats['total_chunks']}")
    print(f"Language: {stats['language']}")
    print("-" * 30)

    # Test queries in Vietnamese
    test_queries = [
        "ƒê·∫°i h·ªôi VI c·ªßa ƒê·∫£ng C·ªông s·∫£n Vi·ªát Nam",
        "C√¥ng cu·ªôc ƒë·ªïi m·ªõi ·ªü Vi·ªát Nam",
        "Ch·ªß nghƒ©a x√£ h·ªôi v√† c√°ch m·∫°ng ·ªü Vi·ªát Nam",
        "L·ªãch s·ª≠ th·ªëng nh·∫•t ƒë·∫•t n∆∞·ªõc",
        "Nh·ªØng th√†nh t·ª±u c·ªßa c√¥ng cu·ªôc ƒë·ªïi m·ªõi",
        "B∆∞·ªõc ngo·∫∑t c·ªßa ƒë·∫•t n∆∞·ªõc sau nƒÉm 1986",
        "Vai tr√≤ l√£nh ƒë·∫°o c·ªßa ƒê·∫£ng C·ªông s·∫£n",
        "Nh·ªØng kh√≥ khƒÉn trong qu√° tr√¨nh ƒë·ªïi m·ªõi",
        "Quan h·ªá ƒë·ªëi ngo·∫°i trong th·ªùi k·ª≥ ƒë·ªïi m·ªõi",
        "Ph√°t tri·ªÉn kinh t·∫ø th·ªã tr∆∞·ªùng ƒë·ªãnh h∆∞·ªõng x√£ h·ªôi ch·ªß nghƒ©a",
    ]

    print("\nüîç Testing Search Queries:")
    print("=" * 50)

    for i, query in enumerate(test_queries, 1):
        print(f"\n{i}. Query: '{query}'")
        print("-" * 40)

        try:
            results = await qdrant_service.search_corpus(query, top_k=3)

            if results:
                for result in results:
                    print(".3f")
                    print(f"   Section: {result['section']}")
                    print(f"   Word Count: {result['word_count']}")
                    print(f"   Chunk: {result['chunk_index']}/{result['total_chunks']}")
                    print(f"   Preview: {result['text'][:150]}...")
                    print()
            else:
                print("   No results found")

        except Exception as e:
            print(f"   Error: {e}")

    print("\n‚úÖ Search testing completed!")
    return True


async def interactive_search():
    """Interactive search mode for manual testing."""

    print("\nü§ñ Interactive Search Mode")
    print("=" * 30)
    print("Enter Vietnamese search queries (type 'quit' to exit):")

    while True:
        try:
            query = input("\nEnter query: ").strip()

            if not query:
                continue

            if query.lower() in ["quit", "exit", "q"]:
                break

            print(f"\nSearching for: '{query}'")
            print("-" * 40)

            results = await qdrant_service.search_corpus(query, top_k=5)

            if results:
                for i, result in enumerate(results, 1):
                    print(f"\n{i}. Score: {result['score']:.3f}")
                    print(f"   Section: {result['section']}")
                    print(f"   Text: {result['text'][:300]}...")
            else:
                print("No results found")

        except KeyboardInterrupt:
            print("\nExiting...")
            break
        except Exception as e:
            print(f"Error: {e}")


async def main():
    """Main function."""
    # Run basic tests
    success = await test_corpus_search()

    if success:
        # Offer interactive mode
        interactive = (
            input("\nWould you like to try interactive search? (y/n): ").strip().lower()
        )
        if interactive in ["y", "yes"]:
            await interactive_search()

    print("\nüéâ All tests completed!")


if __name__ == "__main__":
    asyncio.run(main())
